'''
Simple Pyscan NFC / MiFare Classic Example
Copyright (c) 2020, Pycom Limited.

This example runs the NFC discovery loop in a thread.
If a card is detected it will read the UID and compare it to VALID_CARDS
RGB LED is BLUE while waiting for card,
GREEN if card is valid, RED if card is invalid
'''

DEBUG = False  # change to True to see debug messages

from pyscan import Pyscan
from MFRC630 import MFRC630
from LIS2HH12 import LIS2HH12
from LTR329ALS01 import LTR329ALS01
import binascii
import time
import pycom
import _thread
from mqtt import MQTTClient
from crypto import AES
import crypto
from network import WLAN
import machine

class Eleve(object):
    """docstring forEleve."""

    def __init__(self, nom, idCarte):
        self.nom = nom
        self.idCarte = idCarte


Pierre = Eleve("Pierre", [0x04, 0x29, 0x62, 0xBA, 0x3E, 0x62, 0x80, 0x00, 0x00, 0x00])
PierreTel = Eleve("PierreTel", [0x04, 0x44, 0x52, 0x0B, 0x33, 0x50, 0x80])
PierreCB = Eleve("PierreCB", [0x02, 0xBD, 0xCF, 0xC1, 0xA1, 0x03, 0x50])

Lilian = Eleve("Lilian", [0x04, 0x38, 0x64, 0xD2, 0x81, 0x67, 0x80])
Samuel = Eleve("Samuel", [0x04, 0x53, 0x2F, 0x82, 0x00])
Quentin = Eleve("Quentin", [0x04, 0x35, 0x50, 0xAA, 0x00])
Clement = Eleve("Clement", [0x04, 0x20, 0x26, 0x32, 0x00])
Arthur = Eleve("Arthur", [0x04, 0x53, 0x2F, 0x7A, 0x00])

VALID_USERS = [Pierre, Samuel, Quentin, Clement, Arthur, PierreTel, PierreCB, Lilian]

py = Pyscan()
nfc = MFRC630(py)
lt = LTR329ALS01(py)
li = LIS2HH12(py)

RGB_BRIGHTNESS = 0x8

RGB_RED = (RGB_BRIGHTNESS << 16)
RGB_GREEN = (RGB_BRIGHTNESS << 8)
RGB_BLUE = (RGB_BRIGHTNESS)

# Make sure heartbeat is disabled before setting RGB LED
pycom.heartbeat(False)

# Initialise the MFRC630 with some settings
nfc.mfrc630_cmd_init()

# MQTT paramètres
mqttClient = MQTTClient("ProjetCarte", "broker.hivemq.com", port=1883)
print(mqttClient.connect())

def Subscribe_handler(topic, msg):
    if(msg == b'0'):
        pycom.rgbled(RGB_GREEN)
        time.sleep(1)
    if(msg == b'1'):
        pycom.rgbled(RGB_RED)
        time.sleep(1)

mqttClient.set_callback(Subscribe_handler)

# AES paramètres
#key = b'4E635266556A586E5A72347537782141' # 128 bit (16 bytes) key
key=[
    b'4E635266556A586E5A72347537782141',# 0
    b'28482B4D6251655468576D5A71347436',# 1
    b'25432A46294A404E635266556A586E32',# 2
    b'3979244226452948404D635165546857',# 3
    b'7538782F413F4428472B4B6250655368',# 4
    b'546A576E5A7234743777217A25432A46',# 5
    b'635166546A576E5A7234753778214125',# 6
    b'3F4528482B4B6250655368566D597133',# 7
    b'482B4D6251655468576D597133743677',# 8
    b'645367566B59703373367638792F423F',# 9
]

iv = crypto.getrandbits(128) # hardware generated random IV (never reuse it)
cipher = AES(key[0], AES.MODE_CFB, iv)

def check_uid(uid, len):
    #return VALID_CARDS.count(uid[:len])
    #Fouiller tout VALID_USERS et tester le .idCarte de chaque utilisateur
    for u in VALID_USERS:
        isNotGranted = True
        print_debug("liste [{}]".format(', '.join(hex(x) for x in u.idCarte)))
        print_debug("liste [{}]\n".format(', '.join(hex(x) for x in uid)))
        for index in range(len):
            if (u.idCarte[index] != uid[index]):
                isNotGranted = False
                break

        if not(isNotGranted):
            isNotGranted = True
        else:
            return u.nom

        # if(u.idCarte[0] == uid[0]):
        #     return True
        # if(u.idCarte == uid[:len]):
        #     return True
    return False

def print_debug(msg):
    if DEBUG:
        print(msg)

def send_sensor_data(name, timeout):
    while(True):
        print_debug(lt.light())
        print_debug(li.acceleration())
        time.sleep(timeout)

def discovery_loop(nfc, id):
    while True:
        mqttClient.subscribe(topic="listeappel2")
        # Send REQA for ISO14443A card type
        print_debug('Sending REQA for ISO14443A card type...')
        atqa = nfc.mfrc630_iso14443a_WUPA_REQA(nfc.MFRC630_ISO14443_CMD_REQA)
        print_debug('Response: {}'.format(atqa))
        if (atqa != 0):
            # A card has been detected, read UID*
            print_debug('A card has been detected, read UID...')
            uid = bytearray(10)
            uid_len = nfc.mfrc630_iso14443a_select(uid)
            print_debug('UID has length: {}'.format(uid_len))

            if (uid_len > 0):
                # print(uid)
                # print("liste [{}]".format(', '.join(hex(x) for x in VALID_USERS[0].idCarte)))
                print_debug('Checking if card with UID: [{:s}] is listed in VALID_CARDS...'.format(binascii.hexlify(uid[:uid_len],' ').upper()))
                # name = check_uid(list(uid), uid_len)

                msgcrypt = iv + cipher.encrypt(b''+binascii.hexlify(uid[:uid_len],' ').upper())
                msgclaire = (b''+binascii.hexlify(uid[:uid_len],' ').upper())
                mqttClient.publish(topic="listeappel", msg= msgcrypt)
                mqttClient.publish(topic="listeappel", msg= msgclaire)
                print(msgclaire.decode('utf-8'))

                # if name != 0:
                #     print(name+'\'s card is listed, turn LED green')
                #     pycom.rgbled(RGB_GREEN)
                #     DataSending()
                #     msg = iv + cipher.encrypt(b''+binascii.hexlify(uid[:uid_len],' ').upper())
                #     mqttClient.publish(topic="testcarte", msg= '\n'+name+'\'s card is listed')
                #     mqttClient.publish(topic="testcarte", msg= 'Card UID :')
                #     mqttClient.publish(topic="testcarte", msg= msg)
                #     mqttClient.publish(topic="testcarte", msg= '\n')
                #     print(msg)
                # else:
                #     print('Card is not listed, turn LED red')
                #     pycom.rgbled(RGB_RED)
                #     DataSending()
                #     mqttClient.publish(topic="testcarte", msg= '\nCard is not listed')
                #     mqttClient.publish(topic="testcarte", msg= ('Card UID: [{:s}]'.format(binascii.hexlify(uid[:uid_len],' ').upper()))+'\n')
                #     print(uid)
        else:
            # No card detected
            #print_debug('Did not detect any card...')
            pycom.rgbled(RGB_BLUE)
        nfc.mfrc630_cmd_reset()
        time.sleep(.5)
        nfc.mfrc630_cmd_init()

def DataSending():
    if wlan.isconnected():
        print("OuiWIFI")
    else :
        print("NONWIFI")

# def DataReceiving():

# This is the start of our main execution... start the thread
_thread.start_new_thread(discovery_loop, (nfc, 0))
_thread.start_new_thread(send_sensor_data, ('Thread 2', 10))
